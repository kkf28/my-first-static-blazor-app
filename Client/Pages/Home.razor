@page "/"
@inject HttpClient _HttpClient
@attribute [StreamRendering(true)]
<div>
    <div class="row p-0 m-0">
        <div class="col-6 my-1 text-start text-danger p-0 m-0">
            <div class=" p-0 m-0">更新时间: </div>
            <div class=" p-0 m-0">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</div>
        </div>
        <div class="col-6 my-1 text-end text-danger p-0 m-0">
            <div class=" p-0 m-0">
                公众号: 云边i投资
            </div>
            <div class=" p-0 m-0"><a href="https://mp.weixin.qq.com/s/Qali6lbWqCk6IhqNG0nf2Q" class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">LOF套利教程</a></div>
        </div>
    </div>
</div>
@if (Ret is not null)
{
    <table class="table custom_small_text">
        <thead class="custom_table-danger">
            <tr>
                <th hidden>#</th>
                <th>基金/代码</th>
                <th>T-1溢价率</th>
                <th>实时溢价率</th>
                <th>申购状态</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var row in (Ret.Rows?.Where(x => x.Cell.DiscountRate is not null && x.Cell.DiscountRate != "-" && x.Cell.ApplyStatus != "开放申购") ?? []).OrderByDescending(x => x.Cell.DiscountRate))
            {
                var location = row.Cell.FundID.StartsWith("50") ? "沪市" : "深市";
                var row_color = Index % 2 == 0 ? "" : "custom_table_bg";
                var color = row.Cell.DiscountRate?.StartsWith("-") == true ? "text-success" : "text-danger";
                var color2 = row.Cell.DiscountRate2?.StartsWith("-") == true ? "text-success" : "text-danger";
                var dicrate = string.IsNullOrEmpty(@row.Cell.DiscountRate) ? "-" : $"{Math.Round(Convert.ToDecimal(@row.Cell.DiscountRate?.Replace("%", "")), 1, MidpointRounding.AwayFromZero)}%";
                var dicrate2 = string.IsNullOrEmpty(@row.Cell.DiscountRate2) ? "-" : $"{Math.Round(Convert.ToDecimal(@row.Cell.DiscountRate2?.Replace("%", "")), 1, MidpointRounding.AwayFromZero)}%";
                <tr class="border-bottom pb-0 @row_color">
                    <td hidden>@Index</td>
                    <td>
                        <p class="m-0 p-0">@row.Cell.FundName</p>
                        <p class="m-0 p-0">@row.Cell.FundID <small>(@location)</small></p>
                    </td>
                    <td class="@color">@dicrate</td>
                    <td class="@color2">@dicrate2</td>
                    <td>@row.Cell.ApplyStatus</td>
                </tr>
                Index++;
            }
        </tbody>
        <tfoot>
            <tr>
                <td class="text-muted">数据仅供参考</td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </tfoot>
    </table>
    <div>
        <div class="row m-0 p-0">
            <div class="col-6 m-0 p-0">
                <p class="fw-normal mb-1">温馨提示:</p>
                <p class="lh-base fw-light">
                    1.数据仅供参考，不构成投资建议!<br class="border-0" />
                    2.数据有一定的延时性，请关注更新时间!<br class="border-0" />
                    3.估值可能会有一定的误差，请谨慎参考!
                </p>
            </div>
            <div class="col-6">
                <div class="text-center">
                    <img src="images/wechat.jpg" class="rounded img-thumbnail p-2" alt="..." />
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p class="text-light">loading @docs</p>
    <div class="text-center">
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <svg width="200" height="200" hidden>
        <circle cx="100" cy="100" r="50" fill="none" stroke="#e74c3c" stroke-width="5">
            <animateTransform attributeName="transform"
                              type="rotate"
                              from="0 100 100"
                              to="360 100 100"
                              dur="3s"
                              repeatCount="indefinite" />
        </circle>
    </svg>
}
@code {
    public int row { get; set; }
    public string docs { get; set; } = "...";
    public int Index { get; set; }
    public string? Result { get; set; }
    public QDIIModel? Ret { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // var t1 = Task.Run(() =>
        //   {
        //       for (int i = 0; i < 10; i++)
        //       {
        //           docs = (i % 6) switch { 0 => ".", 1 => "..", 2 => "...", 3 => "....", 4 => ".....", 5 => "......", _ => "" };
        //           Task.Delay(TimeSpan.FromSeconds(0.5)).Wait();
        //           StateHasChanged();
        //       }
        //   });
        await Get();
        // await t1.WaitAsync(CancellationToken.None);
    }

    private async Task Get()
    {
        this.row = 0;
        this.Index = 1;
        Ret = null;
        var response = await _HttpClient.GetAsync("/api/QDII");
        Result = await response.Content.ReadAsStringAsync();
        // var obj = await response.Content.ReadFromJsonAsync<dynamic>();
        // var doc=JsonSerializer.SerializeToDocument(Result);
        // Result= JsonSerializer.Serialize(obj, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        if (response.IsSuccessStatusCode)
        {
            // var obj = JsonSerializer.Deserialize<dynamic>(Result, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            Ret = JsonConvert.DeserializeObject<QDIIModel>(Result);
            // var obj = J
            Result = $"success";

        }
        else
        {
            Result = response.ReasonPhrase;
        }
    }
}